# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tester.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets

THEMES = {'Простейший поток': 0,
          'Суммирование и разъединение простейших потоков': 1,
          'Показательный закон распределения времени обслуживания': 2,
          'Нестационарный Пуассоновский поток': 3,
          'Теорема Литтла': 4,
          'Задачи для самостоятельного решения 1': 5,
          'Одноканальная система массового обслуживания с отказами': 6,
          'Система массового обслуживания с ожиданием и без ограничения очереди': 7,
          'Система массового обслуживания с ожиданием и ограничением длины очереди': 8,
          'Многоканальная система массового обслуживания с отказами М/М/N/0': 9,
          'Многоканальная система массового обслуживания с неограниченным ожиданием': 10,
          'Многоканальная система массового обслуживания с ожиданием и ограниченной длиной очереди': 11,
          'Задачи для самостоятельного решения 2': 12,
          'Контрольная работа': 13,
          }


class ProgramAuth:
    pass


class Testing:
    pass


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 720))
        font = QtGui.QFont()
        font.setFamily("Dyuthi")
        font.setKerning(True)
        MainWindow.setFont(font)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setEnabled(True)
        self.listWidget.setGeometry(QtCore.QRect(0, 0, 391, 711))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listWidget.sizePolicy().hasHeightForWidth())
        self.listWidget.setSizePolicy(sizePolicy)
        self.listWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.listWidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(11)
        font.setWeight(50)
        self.listWidget.setFont(font)
        self.listWidget.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.listWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.listWidget.setAutoFillBackground(False)
        self.listWidget.setStyleSheet("QListWidget { border-style: outset; border-width: 1px }\n"
                                      "QListWidget::item { border-bottom: 1px solid black }\n"
                                      "QListWidget::item:selected { background-color: rgb(77, 148, 255) }\n"
                                      "QListWidget::item:hover { background-color: rgb(153, 194, 255) }")
        self.listWidget.setLineWidth(5)
        self.listWidget.setMidLineWidth(0)
        self.listWidget.setMovement(QtWidgets.QListView.Static)
        self.listWidget.setFlow(QtWidgets.QListView.TopToBottom)
        self.listWidget.setProperty("isWrapping", False)
        self.listWidget.setLayoutMode(QtWidgets.QListView.SinglePass)
        self.listWidget.setViewMode(QtWidgets.QListView.ListMode)
        self.listWidget.setBatchSize(100)
        self.listWidget.setWordWrap(True)
        self.listWidget.setObjectName("listWidget")

        for i in range(len(THEMES)):
            self.listWidget.addItem(QtWidgets.QListWidgetItem())

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(389, -1, 891, 711))
        self.scrollArea.setStyleSheet("border-style: outset; border-width: 1px")
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 875, 709))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

        self.label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label.setGeometry(QtCore.QRect(0, 0, 891, 711))
        self.label.setText("")
        self.label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")

        self.scrollArea.setWidget(self.label)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tester_ui(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def tester_ui(self, main_window):
        self.curr_question = 1
        self.MIN_QUESTION = 1
        self.MAX_QUESTION = 23

        self.tsArea = QtWidgets.QScrollArea(main_window)
        self.tsArea.setGeometry(QtCore.QRect(389, -1, 891, 711))
        self.tsArea.setStyleSheet("border-style: outset; border-width: 1px")
        self.tsArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tsArea.setWidgetResizable(True)
        self.tsArea.setObjectName("scrollArea2")

        self.tWidget = QtWidgets.QWidget(main_window)
        self.tWidget.setGeometry(QtCore.QRect(0, 0, 875, 709))
        self.tWidget.setObjectName("scrollAreaWidgetContents2")

        self.layout = QtWidgets.QVBoxLayout(main_window)

        self.btn_next = QtWidgets.QPushButton('Далее', main_window)
        self.btn_next.setGeometry(0, 0, 100, 50)
        self.btn_next.setEnabled(True)
        self.btn_next.clicked.connect(self.next_question)

        self.btn_back = QtWidgets.QPushButton('Назад', main_window)
        self.btn_back.setGeometry(QtCore.QRect(0, 0, 100, 50))
        self.btn_back.setEnabled(True)
        self.btn_back.clicked.connect(self.previous_question)

        self.label2 = QtWidgets.QLabel(self.tWidget)
        self.label2.setGeometry(QtCore.QRect(0, 0, 891, 711))

        self.label2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.label2.setWordWrap(False)
        self.label2.setObjectName("options")
        self.label2.setPixmap(QtGui.QPixmap('img/options.png'))
        self.label2.resize(self.label2.pixmap().height(), self.label2.pixmap().height())

        self.layout.addWidget(self.label2)
        self.layout.addWidget(self.btn_next)
        self.layout.addWidget(self.btn_back)

        self.tWidget.setLayout(self.layout)

        self.tsArea.setWidget(self.tWidget)

        self.tsArea.hide()

    def next_question(self):
        if self.curr_question < self.MAX_QUESTION:
            self.curr_question += 1
        else:
            self.curr_question = self.MAX_QUESTION

    def previous_question(self):
        if self.curr_question > self.MIN_QUESTION:
            self.curr_question = self.curr_question - 1
        else:
            self.curr_question = self.MIN_QUESTION

    def retranslateUi(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "Теория телетрафика мультисервисных сетей"))

        self.listWidget.setSortingEnabled(False)

        for i in THEMES:
            self.listWidget.item(THEMES[i]).setText(i)

        self.listWidget.itemClicked.connect(self.qlistAction)

    def qlistAction(self, item):
        item_value = int(THEMES[item.text()])
        if item_value < 13:
            self.tsArea.hide()
            self.scrollArea.show()

            self.scrollArea.setWidget(self.label)
            self.label.setPixmap(QtGui.QPixmap(f'img/{item_value}.png'))
            self.label.resize(self.label.pixmap().height(), self.label.pixmap().height())
        elif item_value == 13:
            self.scrollArea.hide()
            self.tsArea.show()


class mywindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(mywindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)


app = QtWidgets.QApplication([])
application = mywindow()
application.show()

sys.exit(app.exec())
