# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tester.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets

THEMES = {'Простейший поток': 0,
          'Суммирование и разъединение простейших потоков': 1,
          'Показательный закон распределения времени обслуживания': 2,
          'Нестационарный Пуассоновский поток': 3,
          'Теорема Литтла': 4,
          'Задачи для самостоятельного решения 1': 5,
          'Одноканальная система массового обслуживания с отказами': 6,
          'Система массового обслуживания с ожиданием и без ограничения очереди': 7,
          'Система массового обслуживания с ожиданием и ограничением длины очереди': 8,
          'Многоканальная система массового обслуживания с отказами М/М/N/0': 9,
          'Многоканальная система массового обслуживания с неограниченным ожиданием': 10,
          'Многоканальная система массового обслуживания с ожиданием и ограниченной длиной очереди': 11,
          'Задачи для самостоятельного решения 2': 12,
          'Контрольная работа': 13,
          }


class ProgramAuth:
    pass


class Testing:
    def __init__(self):
        self.answers = {}
        self.current_questions_pack = 1  # от 1 до 7, по 3 вопроса в группе | 21 / 3 = 7
        self.MIN_QUESTION = 1
        self.MAX_QUESTION = 21


class MainWindowUI(object):
    def setupUi(self, main_window):
        main_window.setObjectName("MainWindow")
        main_window.resize(1280, 720)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(main_window.sizePolicy().hasHeightForWidth())
        main_window.setSizePolicy(size_policy)
        main_window.setMinimumSize(QtCore.QSize(1280, 720))
        main_window.setMaximumSize(QtCore.QSize(1280, 720))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setKerning(True)
        main_window.setFont(font)
        self.tester = Testing()
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setEnabled(True)
        self.listWidget.setGeometry(QtCore.QRect(0, 0, 391, 711))
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.listWidget.sizePolicy().hasHeightForWidth())
        self.listWidget.setSizePolicy(size_policy)
        self.listWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.listWidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setWeight(50)
        self.listWidget.setFont(font)
        self.listWidget.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.listWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.listWidget.setAutoFillBackground(False)
        self.listWidget.setStyleSheet("QListWidget { border-style: outset; border-width: 1px }\n"
                                      "QListWidget::item { border-bottom: 2px solid black }\n"
                                      "QListWidget::item:selected { background-color: rgb(77, 148, 255) }\n"
                                      "QListWidget::item:hover { background-color: rgb(153, 194, 255) }")
        self.listWidget.setLineWidth(5)
        self.listWidget.setMidLineWidth(0)
        self.listWidget.setMovement(QtWidgets.QListView.Static)
        self.listWidget.setFlow(QtWidgets.QListView.TopToBottom)
        self.listWidget.setProperty("isWrapping", False)
        self.listWidget.setLayoutMode(QtWidgets.QListView.SinglePass)
        self.listWidget.setViewMode(QtWidgets.QListView.ListMode)
        self.listWidget.setWordWrap(True)
        self.listWidget.setObjectName("listWidget")

        for i in range(len(THEMES)):
            self.listWidget.addItem(QtWidgets.QListWidgetItem())

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(389, -1, 891, 711))
        self.scrollArea.setStyleSheet("border-style: outset; border-width: 1px")
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 875, 709))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

        self.label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label.setGeometry(QtCore.QRect(0, 0, 891, 711))
        self.label.setText("")
        self.label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")

        self.scrollArea.setWidget(self.label)
        main_window.setCentralWidget(self.centralwidget)

        self.ui_add_content(main_window)
        self.tester_ui(main_window)

        QtCore.QMetaObject.connectSlotsByName(main_window)

    def tester_ui(self, main_window):
        self.tsArea = QtWidgets.QScrollArea(main_window)
        self.tsArea.setGeometry(QtCore.QRect(389, -1, 891, 711))
        self.tsArea.setStyleSheet("border-style: outset; border-width: 1px")
        self.tsArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tsArea.setWidgetResizable(True)
        self.tsArea.setObjectName("scrollArea2")

        self.tWidget = QtWidgets.QWidget(main_window)
        self.tWidget.setGeometry(QtCore.QRect(0, 0, 875, 709))
        self.tWidget.setObjectName("scrollAreaWidgetContents2")

        self.layout = QtWidgets.QVBoxLayout(main_window)

        self.btn_next = QtWidgets.QPushButton('Далее', main_window)
        self.btn_next.setGeometry(0, 0, 100, 50)
        self.btn_next.setEnabled(True)
        self.btn_next.clicked.connect(self.next_question)
        self.btn_next.setStyleSheet("QPushButton { border-style: outset; border-width: 2px; border-radius: 10px;"
                                    "border-color: black; min-width: 10em; padding: 6px; "
                                    "background: rgb(140, 140, 140) }"
                                    "QPushButton:hover { background: rgb(179, 179, 179) }"
                                    "QPushButton:pressed { font: bold }")

        self.btn_back = QtWidgets.QPushButton('Назад', main_window)
        self.btn_back.setGeometry(QtCore.QRect(0, 0, 100, 50))
        self.btn_back.setEnabled(True)
        self.btn_back.clicked.connect(self.previous_question)
        self.btn_back.setStyleSheet("QPushButton { border-style: outset; border-width: 2px; border-radius: 10px;"
                                    "border-color: black; min-width: 10em; padding: 6px; "
                                    "background: rgb(140, 140, 140) }"
                                    "QPushButton:hover { background: rgb(179, 179, 179) }"
                                    "QPushButton:pressed { font: bold }")

        self.btn_end = QtWidgets.QPushButton('Закончить', main_window)
        self.btn_end.setGeometry(0, 0, 100, 50)
        self.btn_end.setEnabled(True)
        self.btn_end.clicked.connect(self.end_test)
        self.btn_end.setStyleSheet("QPushButton { border-style: outset; border-width: 2px; border-radius: 10px;"
                                   "border-color: black; min-width: 10em; padding: 6px; "
                                   "background: rgb(140, 140, 140) }"
                                   "QPushButton:hover { background: rgb(179, 179, 179) }"
                                   "QPushButton:pressed { font: bold }")

        self.options = QtWidgets.QLabel(self.tWidget)
        self.options.setGeometry(QtCore.QRect(0, 0, 891, 711))

        self.options.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.options.setObjectName("options")
        self.options.setPixmap(QtGui.QPixmap('img/options.png'))
        self.options.resize(self.options.pixmap().height(), self.options.pixmap().height())

        variant_validator = QtGui.QIntValidator()
        variant_validator.setRange(0, 9)

        self.variant = QtWidgets.QLineEdit(self.tWidget)
        self.variant.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.variant.setGeometry(0, 0, 50, 50)
        self.variant.setPlaceholderText('Введите последнюю цифру зачетной книжки:')
        self.variant.setValidator(variant_validator)

        validator = QtGui.QDoubleValidator()
        validator.setNotation(QtGui.QDoubleValidator.StandardNotation)
        validator.setRange(0, 1000.0, 2)

        self.question_p1 = QtWidgets.QLabel(self.tWidget)
        self.question_p1.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)

        self.answer_p1 = QtWidgets.QLineEdit(self.tWidget)
        self.answer_p1.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.answer_p1.setPlaceholderText('Введите ответ:')
        self.answer_p1.setValidator(validator)

        self.question_p2 = QtWidgets.QLabel(self.tWidget)
        self.question_p2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)

        self.answer_p2 = QtWidgets.QLineEdit(self.tWidget)
        self.answer_p2.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.answer_p2.setPlaceholderText('Введите ответ:')
        self.answer_p2.setValidator(validator)

        self.question_p3 = QtWidgets.QLabel(self.tWidget)
        self.question_p3.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)

        self.answer_p3 = QtWidgets.QLineEdit(self.tWidget)
        self.answer_p3.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.answer_p3.setPlaceholderText('Введите ответ:')
        self.answer_p3.setValidator(validator)

        self.layout.addWidget(self.options)
        self.layout.addWidget(self.variant)
        self.layout.addWidget(self.question_p1)
        self.layout.addWidget(self.answer_p1)
        self.layout.addWidget(self.question_p2)
        self.layout.addWidget(self.answer_p2)
        self.layout.addWidget(self.question_p3)
        self.layout.addWidget(self.answer_p3)
        self.layout.addWidget(self.btn_next)
        self.layout.addWidget(self.btn_back)
        self.layout.addWidget(self.btn_end)

        self.tWidget.setLayout(self.layout)

        self.tsArea.setWidget(self.tWidget)

        self.tsArea.hide()

        self.update_question()

    def end_test(self):
        pass

    def next_question(self):
        if self.tester.current_questions_pack < 7:
            self.update_answers()
            self.tester.current_questions_pack += 1
            self.update_question()
        else:
            self.tester.current_questions_pack = 7

    def previous_question(self):
        if self.tester.current_questions_pack > 1:
            self.update_answers()
            self.tester.current_questions_pack -= 1
            self.update_question()
        else:
            self.tester.current_questions_pack = 1

    def update_answers(self):
        curr_qp = self.tester.current_questions_pack
        q1, q2, q3 = curr_qp * 3 - 2, curr_qp * 3 - 1, curr_qp * 3

        a_keys = self.tester.answers.keys()
        input_answers = [self.answer_p1, self.answer_p2, self.answer_p3]
        q_index = [q1, q2, q3]

        for index in range(3):
            if input_answers[index].text().isdigit():
                if q_index[index] not in a_keys:
                    self.tester.answers[q_index[index]] = input_answers[index].text()
                if q_index[index] != self.tester.answers[q_index[index]]:
                    self.tester.answers[q_index[index]] = input_answers[index].text()
                input_answers[index].setText('')

    def update_question(self):
        curr_qp = self.tester.current_questions_pack
        q1, q2, q3 = curr_qp * 3 - 2, curr_qp * 3 - 1, curr_qp * 3

        self.question_p1.setPixmap(QtGui.QPixmap(f'img/q{q1}.png'))
        self.question_p1.resize(self.question_p1.pixmap().height(), self.question_p1.pixmap().height())
        self.question_p2.setPixmap(QtGui.QPixmap(f'img/q{q2}.png'))
        self.question_p2.resize(self.question_p2.pixmap().height(), self.question_p2.pixmap().height())
        self.question_p3.setPixmap(QtGui.QPixmap(f'img/q{q3}.png'))
        self.question_p3.resize(self.question_p3.pixmap().height(), self.question_p3.pixmap().height())

        self.answer_p1.setText(self.tester.answers.get(q1))
        self.answer_p2.setText(self.tester.answers.get(q2))
        self.answer_p3.setText(self.tester.answers.get(q3))

    def ui_add_content(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "Теория телетрафика мультисервисных сетей"))

        self.listWidget.setSortingEnabled(False)

        for i in THEMES:
            self.listWidget.item(THEMES[i]).setText(i)

        self.listWidget.itemClicked.connect(self.menu_action)

    def menu_action(self, item):
        item_value = int(THEMES[item.text()])
        if item_value < 13:
            self.tsArea.hide()
            self.scrollArea.show()

            self.scrollArea.setWidget(self.label)
            self.label.setPixmap(QtGui.QPixmap(f'img/{item_value}.png'))
            self.label.resize(self.label.pixmap().height(), self.label.pixmap().height())
        elif item_value == 13:
            self.scrollArea.hide()
            self.tsArea.show()


class MyWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MyWindow, self).__init__()
        self.ui = MainWindowUI()
        self.ui.setupUi(self)


app = QtWidgets.QApplication([])
application = MyWindow()
application.show()

sys.exit(app.exec())
